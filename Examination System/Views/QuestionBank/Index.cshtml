@model List<Examination_System.ViewModels.QuestionBankViewModel>

@{
    ViewData["Title"] = "Questions";
}

@section Style {

    <style>
        /* Base Styles */
        body {
            background-color: #F0ECE5; /* Light off-white background */
            font-family: "Lora", serif;
            color: #161A30; /* Dark text for contrast */
        }

        .container {
            padding: 2rem;
            max-width: 1200px;
            width: 100%;
            overflow-x: auto;
            white-space: nowrap;
        }

        /* Header Styles */
        h2 {
            color: #31304D; /* Dark blue for headings */
            font-weight: 700;
            padding-bottom: 1rem;
            margin-bottom: 2rem;
            border-bottom: 3px solid #4c51bf; /* Accent color for underline */
        }

        /* Review Exam Button */
        .btn-review {
            background: #B6BBC4 !important; /* Stone gray for buttons */
            border: none !important;
            padding: 0.8rem 1.5rem !important;
            border-radius: 8px !important;
            box-shadow: 0 4px 15px rgba(182, 187, 196, 0.2) !important;
            transition: all 0.3s ease !important;
            color: #161A30 !important; /* Dark text for buttons */
        }

            .btn-review:hover {
                transform: translateY(-2px);
                background: linear-gradient(135deg, #31304D 0%, #161A30 100%) !important; /* Dark blue gradient */
                color: #F0ECE5 !important; /* Light text on hover */
            }

        /* Adjust header container */
        .header-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        /* Modify existing button container */
        .button-group {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        /* Button Styles */
        #addExamBtn {
            background: #B6BBC4; /* Stone gray for buttons */
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(182, 187, 196, 0.2);
            transition: all 0.3s ease;
            color: #161A30; /* Dark text for buttons */
        }

            #addExamBtn:hover {
                transform: translateY(-2px);
                background: linear-gradient(135deg, #31304D 0%, #161A30 100%); /* Dark blue gradient */
                color: #F0ECE5; /* Light text on hover */
            }

        /* Table Container */
        #examManagerTable_wrapper {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
            overflow: auto;
        }

        /* Table Styles */
        #examManagerTable {
            border-collapse: collapse;
            margin: 0;
        }

            #examManagerTable thead {
                background: #161A30; /* Darkest blue for table header */
                color: white;
            }

                #examManagerTable thead th {
                    border: none;
                    padding: 1rem;
                    font-weight: 600;
                }

            #examManagerTable tbody td {
                padding: 1rem;
                vertical-align: middle;
                border-color: #e9ecef;
            }

            #examManagerTable tbody tr:nth-child(even) {
                background-color: #F8F9FA; /* Light gray for even rows */
            }

        /* Action Buttons */
        .btn-success {
            background-color: #31304D !important; /* Dark blue for success buttons */
            border-color: #31304D !important;
            color: white !important;
        }

        .btn-warning {
            background-color: #B6BBC4 !important; /* Stone gray for warning buttons */
            border-color: #B6BBC4 !important;
            color: #161A30 !important; /* Dark text for buttons */
        }

        .btn-danger {
            background-color: #DC3545 !important; /* Red for danger buttons */
            border-color: #DC3545 !important;
        }

        /* Status Badges */
        .status-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.875rem;
            font-weight: 500;
        }

        .status-scheduled {
            background: rgba(49, 48, 77, 0.1); /* Light dark blue for scheduled status */
            color: #31304D;
        }

        .status-active {
            background: rgba(49, 48, 77, 0.1); /* Light dark blue for active status */
            color: #31304D;
        }

        .status-completed {
            background: rgba(220, 53, 69, 0.1); /* Light red for completed status */
            color: #DC3545;
        }

        /* Search & Pagination */
        .dataTables_filter {
            padding: 0 1rem 1rem;
        }

            .dataTables_filter input {
                border: 2px solid #B6BBC4 !important; /* Stone gray border */
                border-radius: 8px !important;
                padding: 0.6rem 1rem !important;
                background: rgba(255, 255, 255, 0.9) !important;
                transition: all 0.3s ease;
                width: 25rem;
                margin: 0.5rem;
                margin-top: 1rem;
            }

                .dataTables_filter input:focus {
                    border-color: #31304D !important; /* Dark blue border on focus */
                    box-shadow: 0 0 0 3px rgba(49, 48, 77, 0.15) !important;
                    outline: none;
                }

        .dataTables_paginate {
            padding: 1rem;
            margin-top: 1rem;
        }

            .dataTables_paginate .paginate_button {
                padding: 0.5rem 1rem !important;
                border-radius: 8px !important;
                transition: all 0.3s ease !important;
                margin: 0 2px !important;
                color: #31304D !important; /* Dark blue for pagination buttons */
            }

                .dataTables_paginate .paginate_button:hover {
                    background: #31304D !important; /* Dark blue on hover */
                    color: white !important;
                    transform: translateY(-1px);
                }

                .dataTables_paginate .paginate_button.current {
                    font-weight: 700;
                    background: transparent !important;
                    color: #31304D !important; /* Dark blue for current page */
                }

                .dataTables_paginate .paginate_button.previous,
                .dataTables_paginate .paginate_button.next {
                    background: rgba(49, 48, 77, 0.1) !important; /* Light dark blue for previous/next buttons */
                    font-weight: 500;
                }

        #examManagerTable tbody td:nth-child(1) {
            max-width: 300px; /* Fixed width for the question cell */
            max-height: 100px; /* Fixed height for the question cell */
            overflow-y: auto; /* Enable vertical scrolling */
            white-space: normal; /* Allow text to wrap */
            word-wrap: break-word; /* Break long words to prevent overflow */
            padding: 0.5rem; /* Add padding for better readability */
        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .container {
                padding: 1rem;
            }

            #examManagerTable_wrapper {
                border-radius: 8px;
            }

            .dataTables_filter input {
                width: 100%;
            }
        }

        table.dataTable thead .sorting::after,
        table.dataTable thead .sorting_asc::after,
        table.dataTable thead .sorting_desc::after {
            margin: auto;
        }


        #questionModal .modal-content {
            background: linear-gradient(135deg, #31304D 0%, #161A30 100%);
            color: #F0ECE5; /* Light text for contrast */
            border: none;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
            transition: opacity 0.3s ease, transform 0.3s ease;
        }

        /* Modal Header */
        #questionModal .modal-header {
            border-bottom: 1px solid rgba(240, 236, 229, 0.1); /* Light border for separation */
        }

        #questionModal .modal-title {
            color: #F0ECE5; /* Light text for the title */
        }

        /* Modal Body */
        #questionModal .modal-body {
            padding: 1.5rem;
        }

        #modalQuestionText {
            color: #F0ECE5; /* Light text for the question */
        }

        #modalChoices li {
            background: rgba(240, 236, 229, 0.1); /* Light background for choices */
            margin-bottom: 0.5rem;
            padding: 0.75rem;
            border-radius: 8px;
            color: #F0ECE5; /* Light text for choices */
            transition: background 0.3s ease;
        }

            #modalChoices li:hover {
                background: rgba(240, 236, 229, 0.2); /* Slightly lighter background on hover */
            }

            /* Correct Choice Highlight */
            #modalChoices li.correct-choice {
                border: 2px solid green;
            }

        /* Modal Footer */
        #questionModal .modal-footer {
            border-top: 1px solid rgba(240, 236, 229, 0.1); /* Light border for separation */
        }

        #questionModal .btn-secondary {
            background: rgba(240, 236, 229, 0.1); /* Light background for the close button */
            border: none;
            color: #F0ECE5; /* Light text for the button */
            transition: background 0.3s ease;
        }

            #questionModal .btn-secondary:hover {
                background: rgba(240, 236, 229, 0.2); /* Slightly lighter background on hover */
            }

        /* Fade-in Hover Effect */
        #questionModal .modal-content:hover {
            opacity: 0.95;
            transform: scale(1.02);
        }

    </style>
}


<div id="body-content">
    <div class="container mt-2">
        <h2 class="text-center mb-4">
     @Model[0].QuestionData.CourseName Questions
        </h2>

        <!-- Add New Exam Button -->
        <div class="mb-3 text-end">
            <a asp-action="Create" asp-controller="QuestionBank"
               asp-route-instructorId="@ViewBag.InstructorId"
               asp-route-courseId="@ViewBag.CourseId" class="btn btn-primary" id="addExamBtn">
                Add New Question
            </a>
            <a asp-action="Index" asp-controller="QuestionBank" class="btn btn-review" id="reviewExamBtn">All Questions</a>
        </div>

        
        <table id="examManagerTable" class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>Question</th>
                    <th>Instructor</th>
                    <th>Course</th>
                    <th>Type</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var question in Model)
                {
                    <tr>
                        <td>@question.QuestionData.QuestionText</td>
                        <td>@question.QuestionData.InstructorName</td>
                        <td>@question.QuestionData.CourseName</td>
                        <td>@question.QuestionData.Type</td>
                        <td>
                            <button class="btn btn-success btn-sm toggle-view"
                                    data-bs-toggle="modal"
                                    data-bs-target="#questionModal"
                                    data-question-text="@question.QuestionData.QuestionText"
                                    data-choices="@string.Join("|", question.Choices.Select(c => c.Choice))"
                                    data-correct-choice="@question.QuestionData.CorrectChoice">
                                View
                            </button>
                            <a asp-action="Delete" asp-controller="QuestionBank" asp-route-questionId="@question.QuestionData.Id" class="btn btn-danger btn-sm">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Modal for Viewing Question Details -->
<div class="modal fade" id="questionModal" tabindex="-1" aria-labelledby="questionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="questionModalLabel">Question Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <h4 id="modalQuestionText"></h4>
                <ul id="modalChoices" class="list-unstyled"></ul>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Initialize DataTable
            const table = $('#examManagerTable').DataTable({
                responsive: true,
                pageLength: 5,
                lengthChange: false,
                ordering: false,
                searching: true,
                info: false,
                paging: true
            });

            // Dynamically handle "View" button clicks
            $('#examManagerTable tbody').on('click', '.toggle-view', function () {
                // Get question data from data-* attributes
                const button = $(this); // Reference the clicked button
                const questionText = button.data('question-text');
                const choices = button.data('choices').split("|");
                const correctChoice = button.data('correct-choice');

                // Update modal content
                $('#modalQuestionText').text(questionText);
                const choicesList = $('#modalChoices');
                choicesList.empty(); // Clear previous choices

                // Add choices with the correct one highlighted
                choices.forEach((choice, index) => {
                    const listItem = $('<li></li>')
                        .text(`${String.fromCharCode(97 + index)}) ${choice}`)
                        .addClass('p-2 rounded');

                    if (choice === correctChoice) {
                        listItem.addClass('correct-choice'); // Highlight correct choice
                    }

                    choicesList.append(listItem);
                });

                // Show the modal
                $('#questionModal').modal('show');
            });
        });
    </script>
}